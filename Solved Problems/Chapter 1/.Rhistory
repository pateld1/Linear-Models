knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(latex2exp)
library(gridExtra)
library(wesanderson)
library(plotly)
seq_maker = function(y){return(seq(y - (4*3), y + (4*3), length.out = 200))}
data.frame(x = c(10, 20, 40)) %>%
mutate(y = 200 + (5*x)) %>%
ggplot(aes(x,y)) + geom_point(size = 0.75) +
geom_abline(intercept = 200, slope = 5, color = "cornflowerblue",
linetype="dotted", size = 1) +
geom_path(data = data.frame(y = seq_maker(250),
x = 10 + 25*dnorm(seq_maker(250),
mean = 250, sd = 4)), aes(x,y)) +
geom_path(data = data.frame(y = seq_maker(300),
x = 20 + 25*dnorm(seq_maker(300),
mean = 300, sd = 4)), aes(x,y)) +
geom_path(data = data.frame(y = seq_maker(400),
x = 40 + 25*dnorm(seq_maker(400),
mean = 400, sd = 4)), aes(x,y)) +
labs(title = "Normal Error Regression Model",
subtitle = TeX("with Probability Distributions for $X = 10, 20, 40$")) +
theme_minimal()
pnorm(205, mean = 200, sd = 5, lower.tail = TRUE) -
pnorm(195, mean = 200, sd = 5, lower.tail = TRUE)
data.frame(x = 40:100, y = 20 + 0.95*40:100) %>%
ggplot(aes(x,y)) + geom_path(color = "blue4") +
geom_abline(slope = 1, intercept = 0, color = "darkgreen") +
annotate("text", label = "no program", x = 80, y = 65) +
annotate("text", label = "after program", x = 60, y = 90) +
labs(x = "production output before the training program",
y = "production output after the training program",
title = "Effect of Training Output") +
lims(x = c(40, 100)) +
coord_cartesian() +
theme_classic()
sample(rep(c('A', 'B', 'C', 'D'), 4))
sample(rep(c('D1', 'D2', 'D3', 'D4', 'D5'), 4))
gpa = read.csv('CH01PR19.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
lm.fit_manual = function(X, Y){
b1 = sum((X - mean(X))*(Y - mean(Y))) / (sum((X - mean(X))^2))
b0 = mean(Y) - b1*mean(X)
return(c(b0, b1))
}
ls_est19 = lm.fit_manual(gpa$x, gpa$y)
ggplot(gpa, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est19[1], slope = ls_est19[2], color = "cadetblue") +
labs(title = "GPA Prediction", subtitle = "from ACT test score",
x = "ACT Test Score", y = "GPA") +
theme_classic()
paste("The mean freshman GPA for students with an ACT test score of 30 is",
round(ls_est19[1] + (ls_est19[2]*30), 3))
copier = read.csv('CH01PR20.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
ls_est20 = lm.fit_manual(copier$x, copier$y)
ggplot(copier, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est20[1], slope = ls_est20[2], color = "cadetblue") +
labs(title = "Copier Maintenance",
subtitle = "by the Tri-City Office Equipment Corporation",
x = "number of copiers serviced", y = "number of minutes") +
theme_classic()
airfreight = read.csv('CH01PR21.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
ls_est21 = lm.fit_manual(airfreight$x, airfreight$y)
ggplot(airfreight, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est21[1], slope = ls_est21[2], color = "cadetblue") +
labs(title = "Broken Ampules",
subtitle = "due to shipment transfers by airfreight",
x = "number of transfers", y = "number of broken ampules") +
theme_classic()
mean(airfreight$y) - (ls_est21[1] + ls_est21[2]*mean(airfreight$x))
plastic = read.csv('CH01PR22.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
ls_est22 = lm.fit_manual(plastic$x, plastic$y)
ggplot(plastic, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est22[1], slope = ls_est22[2], color = "cadetblue") +
labs(title = "Hardness of Plastic",
subtitle = "after elapsed molding time",
x = "elapsed time, in hrs", y = "hardness, in Brinell units") +
theme_classic()
resid19 = gpa$y - (ls_est19[1] + ls_est19[2]*gpa$x)
sum(resid19)
sum((resid19)^2)/ (nrow(gpa)-2)
sqrt(sum((resid19)^2)/ (nrow(gpa)-2))
resid20 = copier$y - (ls_est20[1] + ls_est20[2]*copier$x)
sum(resid20^2)
sum((resid20)^2) / (nrow(copier)-2)
sqrt(sum((resid20)^2) / (nrow(copier)-2))
resid21 = airfreight$y - (ls_est21[1] + ls_est21[2]*airfreight$x)
resid21[1]
sum(resid21^2)
sum(resid21^2)/(nrow(airfreight)-2)
resid22 = plastic$y - (ls_est22[1] + ls_est22[2]*plastic$x)
sum(resid22)
sum((resid22)^2)/nrow(plastic-2)
sqrt(sum((resid22)^2)/nrow(plastic-2))
muscle = read.csv('CH01PR27.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
ls_est27 = lm.fit_manual(muscle$x, muscle$y)
ggplot(muscle, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est27[1], slope = ls_est27[2], color = "cadetblue") +
labs(title = "Women's Muscle Mass",
subtitle = "in comparison to Age",
x = "age", y = "muscle mass") +
theme_classic()
as.numeric(ls_est27[2])
as.numeric(ls_est27[1] + ls_est27[2]*60)
(muscle$y - (ls_est27[1] + ls_est27[2]*muscle$x))[8]
resid27 = (muscle$y - (ls_est27[1] + ls_est27[2]*muscle$x))
sum((resid27)^2)/nrow(muscle-2)
crime = read.csv('CH01PR28.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
ls_est28 = lm.fit_manual(crime$x, crime$y)
ggplot(crime, aes(x,y)) + geom_point(size = 0.8) +
geom_abline(intercept = ls_est28[1], slope = ls_est28[2], color = "cadetblue") +
labs(title = "Crime Rate",
subtitle = "in medium-sized US counties",
x = "% of individuals having at least a HS diploma in a county",
y = "crime rate, per 100,000 residents") +
theme_classic()
as.numeric(ls_est28[2])
as.numeric(ls_est28[1] + ls_est28[2]*80)
(crime$y - (ls_est28[1] + ls_est28*crime$x))[10]
sum((crime$y - (ls_est28[1] + ls_est28[2]*crime$x))^2) / (nrow(crime) - 2)
paste("Q =", sum((airfreight$y - 10.2 - (4*airfreight$x))^2))
paste("Q =", sum((airfreight$y - 9 - (3*airfreight$x))^2))
paste("Q =", sum((airfreight$y - 11 - (5*airfreight$x))^2))
typo_errors = read.csv('CH01PR42.txt', sep = '', header = FALSE,
col.names = c('y', 'x'),
colClasses = c('numeric', 'numeric'))
typo_llh_fun = function(z){
return(prod((32*pi)^(-1/2)*exp(-(1/32)*(typo_errors$y - z*typo_errors$x)^2)))
}
typo_llh_fun(17)
typo_llh_fun(18)
typo_llh_fun(19)
sum(typo_errors$x * typo_errors$y) / sum((typo_errors$x)^2)
data.frame(x=17:19) %>%
ggplot(aes(x)) +
stat_function(fun = typo_llh_fun) +
lims(y = c(8e-256, 9.5e-256)) +
labs(x = TeX('$\\beta_1$'), y = TeX('$L(\\beta_1)$'),
title = "Likelihood Function",
subtitle = TeX('for $\\beta_1 \\in \\[17, 19\\]$')) +
theme_minimal()
optimize(typo_llh_fun, 17:19, maximum = TRUE)
cdi_cols = c('ID', 'county', 'state', 'area', 'total_pop', 'perc_pop_18to34',
'perc_pop_65plus', 'num_physicians', 'num_hosp_beds', 'total_crimes',
'perc_hs_grads', 'perc_bach', 'perc_below_poverty', 'perc_unemploy',
'per_capita_income', 'total_personal_income', 'geographic_region')
cdi_colclasses = c('integer', 'character', 'character', rep('numeric', 13), 'factor')
cdi = read.csv('APPENC02.txt', sep = '', header = FALSE,
col.names = cdi_cols,
colClasses = cdi_colclasses)
cdi_43 = cdi %>%
select(num_physicians, total_pop,
num_hosp_beds, total_personal_income)
physicians_pop = lm.fit_manual(cdi_43$total_pop, cdi_43$num_physicians)
physicians_beds = lm.fit_manual(cdi_43$num_hosp_beds, cdi_43$num_physicians)
physicians_income = lm.fit_manual(cdi_43$total_personal_income,
cdi_43$num_physicians)
physicians_plot1 = ggplot(cdi_43, aes(x = total_pop,
y = num_physicians)) +
geom_point(color = "deepskyblue3") +
geom_abline(intercept = physicians_pop[1],
slope = physicians_pop[2], color = "darkslateblue") +
labs(x = "total population", y = "number of physicians",
title = "Regressing on Number of Physicians",
subtitle = "using Total Population") +
theme_minimal() +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=10),
axis.title.y = element_text(size = 10))
physicians_plot2 = ggplot(cdi_43, aes(x = num_hosp_beds,
y = num_physicians)) +
geom_point(color = "deepskyblue3") +
geom_abline(intercept = physicians_beds[1],
slope = physicians_beds[2], color = "darkslateblue") +
labs(x = "number of hospital beds", y = "number of physicians",
title = "Regressing on Number of Physicians",
subtitle = "using Number of Hospital Beds") +
theme_minimal() +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=10),
axis.title.y = element_text(size = 10))
physicians_plot3 = ggplot(cdi_43, aes(x = total_personal_income,
y = num_physicians)) +
geom_point(color = "deepskyblue3") +
geom_abline(intercept = physicians_income[1],
slope = physicians_income[2], color = "darkslateblue") +
labs(x = "total personal income", y = "number of physicians",
title = "Regressing on Number of Physicians",
subtitle = "using Total Personal Income") +
theme_minimal() +
theme(plot.title = element_text(size=10),
plot.subtitle = element_text(size=10),
axis.title.y = element_text(size = 10))
grid.arrange(arrangeGrob(physicians_plot1, physicians_plot2, ncol = 2),
arrangeGrob(physicians_plot3),
nrow=2)
cdi_resid_total_pop = cdi_43$num_physicians -
(physicians_pop[1] + physicians_pop[2]*cdi_43$total_pop)
sum(cdi_resid_total_pop^2)/(nrow(cdi_43 - 2))
cdi_resid_beds = cdi_43$num_physicians -
(physicians_beds[1] + physicians_beds[2]*cdi_43$num_hosp_beds)
sum(cdi_resid_beds^2)/(nrow(cdi_43 - 2))
cdi_resid_income = cdi_43$num_physicians -
(physicians_income[1] + physicians_income[2]*cdi_43$total_personal_income)
sum(cdi_resid_income^2)/(nrow(cdi_43 - 2))
cdi_geo1 = cdi %>% filter(geographic_region == 1) %>%
select(per_capita_income, perc_bach)
cdi_geo2 = cdi %>% filter(geographic_region == 2) %>%
select(per_capita_income, perc_bach)
cdi_geo3 = cdi %>% filter(geographic_region == 3) %>%
select(per_capita_income, perc_bach)
cdi_geo4 = cdi %>% filter(geographic_region == 4) %>%
select(per_capita_income, perc_bach)
cdi_geo1_model = lm.fit_manual(cdi_geo1$perc_bach, cdi_geo1$per_capita_income)
cdi_geo2_model = lm.fit_manual(cdi_geo2$perc_bach, cdi_geo2$per_capita_income)
cdi_geo3_model = lm.fit_manual(cdi_geo3$perc_bach, cdi_geo3$per_capita_income)
cdi_geo4_model = lm.fit_manual(cdi_geo4$perc_bach, cdi_geo4$per_capita_income)
intercepts = c(cdi_geo1_model[1], cdi_geo2_model[1],
cdi_geo3_model[1], cdi_geo4_model[1])
slopes = c(cdi_geo1_model[2], cdi_geo2_model[2],
cdi_geo3_model[2], cdi_geo4_model[2])
regions = 1:4
geo_labeller = c( '1' = 'Region 1', '2' = 'Region 2',
'3' = 'Region 3', '4' = 'Region 4')
cdi_region_reg = data.frame(slope=slopes, intercept=intercepts,
geographic_region=regions)
ggplot(cdi, aes(x = perc_bach, y = per_capita_income,
color = geographic_region)) +
geom_point(size = 0.7) +
geom_abline(data = cdi_region_reg,
aes(intercept = intercept, slope=slope)) +
facet_wrap(~geographic_region,
labeller = labeller(geographic_region = geo_labeller)) +
scale_color_manual(values=wes_palette(n=4, name="GrandBudapest2")) +
labs(x = "% of individual in country having at least a bachelors degree",
y = "per capita income",
title = "Determining per Capita Income",
subtitle = "based on Geographic Region") +
theme(legend.position = '')
sum((cdi_geo1$per_capita_income - (cdi_geo1_model[1] +
cdi_geo1$perc_bach*cdi_geo1_model[2]))^2) /
(nrow(cdi_geo1)-2)
sum((cdi_geo2$per_capita_income - (cdi_geo2_model[1] +
cdi_geo2$perc_bach*cdi_geo1_model[2]))^2) /
(nrow(cdi_geo2)-2)
sum((cdi_geo3$per_capita_income - (cdi_geo3_model[1] +
cdi_geo3$perc_bach*cdi_geo1_model[2]))^2) /
(nrow(cdi_geo3)-2)
sum((cdi_geo4$per_capita_income - (cdi_geo4_model[1] +
cdi_geo4$perc_bach*cdi_geo1_model[2]))^2) /
(nrow(cdi_geo2)-2)
senic_cols = c('ID', 'length_stay', 'age', 'infection_risk', 'culturing_ratio',
'chest_xray_ratio', 'num_beds', 'med_school_aff', 'region',
'avg_daily_census', 'num_nurses', 'available_facilities')
senic_colclasses = c(rep('numeric', 6), rep('factor', 2), rep('numeric', 3))
senic = read.csv('APPENC01.txt', sep = '', header = FALSE,
col.names = senic_cols,
colClasses = senic_colclasses)
senic_length_stay = senic %>%
select(length_stay, infection_risk, available_facilities, chest_xray_ratio)
senic_stay1 = lm.fit_manual(senic_length_stay$infection_risk,
senic_length_stay$length_stay)
senic_stay2 = lm.fit_manual(senic_length_stay$available_facilities,
senic_length_stay$length_stay)
senic_stay3 = lm.fit_manual(senic_length_stay$chest_xray_ratio,
senic_length_stay$length_stay)
senic_stay1_plot = ggplot(senic, aes(x = infection_risk, y = length_stay)) +
geom_point(size = 0.7) +
geom_abline(intercept = senic_stay1[1], slope = senic_stay1[2],
color = "orchid4") +
labs(x = "infection rate",
y = "length of stay",
title = "Determining Average Length of Stay in a Hospital",
subtitle = "using Infection Risk") +
theme_minimal() +
theme(plot.title = element_text(size = 8),
plot.subtitle = element_text(size = 8),
axis.title = element_text(size = 8),
axis.title.y = element_text(size = 8))
senic_stay2_plot = ggplot(senic, aes(x = available_facilities, y = length_stay)) +
geom_point(size = 0.7) +
geom_abline(intercept = senic_stay2[1], slope = senic_stay2[2],
color = "orchid4") +
labs(x = "percentage of facilities and services",
y = "length of stay",
title = "Determining Average Length of Stay in a Hospital",
subtitle = "using Available Facilities and Services") +
theme_minimal() +
theme(plot.title = element_text(size = 8),
plot.subtitle = element_text(size = 8),
axis.title = element_text(size = 8),
axis.title.y = element_text(size = 8))
senic_stay3_plot = ggplot(senic, aes(x = chest_xray_ratio, y = length_stay)) +
geom_point(size = 0.7) +
geom_abline(intercept = senic_stay3[1], slope = senic_stay3[2],
color = "orchid4") +
labs(x = "ratio of number of X-rays performed to # of patients",
y = "length of stay",
title = "Determining Average Length of Stay in a Hospital",
subtitle = "using Routine Chest X-Ray Ratio") +
theme_minimal() +
theme(plot.title = element_text(size = 8),
plot.subtitle = element_text(size = 8),
axis.title = element_text(size = 8),
axis.title.y = element_text(size = 8))
grid.arrange(arrangeGrob(senic_stay1_plot, senic_stay2_plot, ncol = 2),
arrangeGrob(senic_stay3_plot),
nrow=2)
sum((senic$length_stay -
(senic_stay1[1] + senic_stay1[2]*senic$infection_risk))^2) /
(nrow(senic)-2)
sum((senic$length_stay -
(senic_stay2[1] + senic_stay2[2]*senic$available_facilities))^2) /
(nrow(senic)-2)
sum((senic$length_stay -
(senic_stay3[1] + senic_stay3[2]*senic$chest_xray_ratio))^2) /
(nrow(senic)-2)
senic_geo1 = senic %>% filter(region == 1) %>%
select(length_stay, infection_risk)
senic_geo2 = senic %>% filter(region == 2) %>%
select(length_stay, infection_risk)
senic_geo3 = senic %>% filter(region == 3) %>%
select(length_stay, infection_risk)
senic_geo4 = senic %>% filter(region == 4) %>%
select(length_stay, infection_risk)
senic_geo1_model = lm.fit_manual(senic_geo1$infection_risk, senic_geo1$length_stay)
senic_geo2_model = lm.fit_manual(senic_geo2$infection_risk, senic_geo2$length_stay)
senic_geo3_model = lm.fit_manual(senic_geo3$infection_risk, senic_geo3$length_stay)
senic_geo4_model = lm.fit_manual(senic_geo4$infection_risk, senic_geo4$length_stay)
intercepts = c(senic_geo1_model[1], senic_geo2_model[1],
senic_geo3_model[1], senic_geo4_model[1])
slopes = c(senic_geo1_model[2], senic_geo2_model[2],
senic_geo3_model[2], senic_geo4_model[2])
regions = 1:4
geo_labeller = c( '1' = 'Region 1', '2' = 'Region 2',
'3' = 'Region 3', '4' = 'Region 4')
senic_region_reg = data.frame(slope=slopes, intercept=intercepts,
region=regions)
ggplot(senic, aes(x = infection_risk, y = length_stay,
color = factor(region))) +
geom_point(size = 0.7) +
geom_abline(data = senic_region_reg,
aes(intercept = intercept, slope=slope)) +
facet_wrap(~region,
labeller = labeller(region = geo_labeller)) +
scale_color_manual(values=wes_palette(n=4, name="BottleRocket1")) +
labs(x = "average probability of acquiring infections in hospital",
y = "length of stay of all patients in hospital (in days)",
title = "Determining Patient Length of Stay using Infection Risk",
subtitle = "based on Geographic Region") +
theme(legend.position = '',
axis.title.x = element_text(size=10),
axis.title.y = element_text(size=10))
sum((senic_geo1$length_stay - (senic_geo1_model[1] +
senic_geo1$infection_risk*senic_geo1_model[2]))^2) /
(nrow(senic_geo1)-2)
sum((senic_geo2$length_stay - (senic_geo2_model[1] +
senic_geo2$infection_risk*senic_geo2_model[2]))^2) /
(nrow(senic_geo2)-2)
sum((senic_geo3$length_stay - (senic_geo3_model[1] +
senic_geo3$infection_risk*senic_geo3_model[2]))^2) /
(nrow(senic_geo3)-2)
sum((senic_geo4$length_stay - (senic_geo4_model[1] +
senic_geo4$infection_risk*senic_geo4_model[2]))^2) /
(nrow(senic_geo4)-2)
typo_mle = lm.fit_manual(typo_errors$x, typo_errors$y)
paste('b0 =', round(typo_mle[1], 3))
paste('b1 =', round(typo_mle[2], 3))
typo_mle_fun = function(beta_zero, beta_one){
return(prod((32*pi)^(-1/2)*exp(-(1/32)*(typo_errors$y -
beta_zero -
beta_one*typo_errors$x)^2)))
}
n = 350
typo_likelihood_matrix = matrix(rep(NA, n^2), nrow = n, ncol = n)
b0_val = seq(-10, 10, length = n)
b1_val = seq(17, 19,\ length = n)
View(typo_likelihood_matrix)
n = 350
typo_likelihood_matrix = matrix(rep(NA, n^2), nrow = n, ncol = n)
b0_val = seq(-10, 10, length = n)
b1_val = seq(17, 19, length = n)
for(i in 1:n){
row = c()
for(j in b1_val){
row = c(row, typo_mle_fun(b0_val[i], j))
}
typo_likelihood_matrix[i,] = row
}
typo_likelihood_df = data.frame(b0 = b0_val,
typo_likelihood_matrix)
colnames(typo_likelihood_df) = c('b0', b1_val)
typo_likelihood_df = typo_likelihood_df %>%
gather(key = b1, value = likelihood, colnames(typo_likelihood_df)[1:n+1])
n = 350
typo_likelihood_matrix = matrix(rep(NA, n^2), nrow = n, ncol = n)
b0_val = seq(-10, 10, length = n)
b1_val = seq(17, 19, length = n)
for(i in 1:n){
row = c()
for(j in b1_val){
row = c(row, typo_mle_fun(b0_val[i], j))
}
typo_likelihood_matrix[i,] = row
}
typo_likelihood_df = data.frame(b0 = b0_val,
typo_likelihood_matrix)
rm(typo_likelihood_matrix)
colnames(typo_likelihood_df) = c('b0', b1_val)
typo_likelihood_df = typo_likelihood_df %>%
gather(key = b1, value = likelihood, colnames(typo_likelihood_df)[1:n+1])
plot_ly(data = typo_likelihood_df, x = ~b0, y = ~b1, z = ~likelihood,
marker = list(color = ~likelihood, colorscale = "RdBu",
showscale = TRUE)) %>%
add_markers() %>%
layout(scene = list(xaxis = list(title = "beta0"),
yaxis = list(title = "beta1"),
zaxis = list(title = "likelihood")))
